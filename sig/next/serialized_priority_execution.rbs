module Next
  class SerializedPriorityExecution < ::Concurrent::SerializedExecution
    type job = [Concurrent::AbstractExecutorService, Array[Envelope], Proc]
    @being_executed: bool
    @stash: NonConcurrentPriorityQueue[Job]

    def post: (Concurrent::AbstractExecutorService, Envelope) { (Envelope) -> void } -> void
    def posts: (Array[job]) -> bool?

    private

    def new_job: (Array[Envelope], Concurrent::AbstractExecutorService, Proc) -> Job

    def ns_initialize: -> void
    def call_job: (Job) -> void
  end
end
